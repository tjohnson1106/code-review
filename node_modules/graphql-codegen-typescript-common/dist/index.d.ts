import { PluginFunction } from 'graphql-codegen-core';
import { GraphQLSchema } from 'graphql';
export * from './helpers';
export interface TypeScriptCommonConfig {
    namingConvention?: string;
    avoidOptionals?: boolean;
    constEnums?: boolean;
    enumsAsTypes?: boolean;
    immutableTypes?: boolean;
    interfacePrefix?: string;
    enums?: {
        [enumName: string]: {
            [valueName: string]: string;
        };
    };
    scalars?: {
        [scalarName: string]: string;
    };
}
export declare const DEFAULT_SCALARS: {
    String: string;
    Int: string;
    Float: string;
    Boolean: string;
    ID: string;
};
export declare function initCommonTemplate(hbs: any, schema: any, config: any): {
    templateContext: {
        config: any;
        primitives: any;
        types: import("graphql-codegen-core/dist/types").Type[];
        inputTypes: import("graphql-codegen-core/dist/types").Type[];
        enums: import("graphql-codegen-core/dist/types").Enum[];
        unions: import("graphql-codegen-core/dist/types").Union[];
        interfaces: import("graphql-codegen-core/dist/types").Interface[];
        scalars: import("graphql-codegen-core/dist/types").Scalar[];
        definedDirectives: import("graphql-codegen-core/dist/types").Directive[];
        hasTypes: boolean;
        hasInputTypes: boolean;
        hasEnums: boolean;
        hasUnions: boolean;
        hasScalars: boolean;
        hasInterfaces: boolean;
        hasDefinedDirectives: boolean;
        rawSchema: GraphQLSchema;
        directives: import("graphql-codegen-core/dist/types").DirectiveUseMap;
        usesDirectives: boolean;
    };
    convert: (str: string) => string;
    scalars: any;
};
export declare const plugin: PluginFunction<TypeScriptCommonConfig>;
