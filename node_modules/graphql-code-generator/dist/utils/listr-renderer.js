"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var logUpdate = require("log-update");
var identString = require("indent-string");
var UpdateRenderer = require("listr-update-renderer");
var errors_1 = require("../errors");
var Renderer = /** @class */ (function () {
    function Renderer(tasks, options) {
        this.updateRenderer = new UpdateRenderer(tasks, options);
    }
    Renderer.prototype.render = function () {
        return this.updateRenderer.render();
    };
    Renderer.prototype.end = function (err) {
        this.updateRenderer.end(err);
        if (typeof err === undefined) {
            logUpdate.clear();
            return;
        }
        // persist the output
        logUpdate.done();
        // show errors
        if (err) {
            if (err.errors && err.errors.length) {
                var count = identString(chalk_1.default.red.bold("We found " + err.errors.length + " errors"), 4);
                var details = err.errors
                    .map(function (error) {
                    if (errors_1.isDetailedError(error)) {
                        return error.details;
                    }
                    return error;
                })
                    .map(function (msg, i) {
                    var source = err.errors[i].source;
                    if (source) {
                        var title = identString(chalk_1.default.red("Failed to generate " + source), 4);
                        return [title, msg].join('\n');
                    }
                    return msg;
                })
                    .join('\n');
                logUpdate(['', count, details].join('\n\n'));
            }
            else {
                logUpdate(chalk_1.default.red.bold(err.message));
            }
        }
        logUpdate.done();
    };
    return Renderer;
}());
exports.Renderer = Renderer;
//# sourceMappingURL=listr-renderer.js.map