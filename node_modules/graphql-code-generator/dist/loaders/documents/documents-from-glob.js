"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var isGlob = require("is-glob");
var glob = require("glob");
var fs_1 = require("fs");
var path_1 = require("path");
var document_finder_1 = require("../../utils/document-finder");
var errors_1 = require("../../errors");
var isValidPath = require("is-valid-path");
exports.graphQLExtensions = ['.graphql', '.graphqls', '.gql'];
var DocumentsFromGlob = /** @class */ (function () {
    function DocumentsFromGlob() {
    }
    DocumentsFromGlob.prototype.canHandle = function (doc) {
        return isGlob(doc) || isValidPath(doc);
    };
    DocumentsFromGlob.prototype.documentsFromGlobs = function (documentGlob) {
        return new Promise(function (resolve, reject) {
            glob(documentGlob, function (err, files) {
                if (err) {
                    reject(err);
                }
                if (!files || files.length === 0) {
                    console['warn']("No files matched for glob expression: " + documentGlob);
                }
                resolve(files);
            });
        });
    };
    DocumentsFromGlob.prototype.loadFileContent = function (filePath) {
        if (fs_1.existsSync(filePath)) {
            var fileContent = fs_1.readFileSync(filePath, 'utf8');
            var fileExt = path_1.extname(filePath);
            if (exports.graphQLExtensions.includes(fileExt)) {
                return graphql_1.parse(new graphql_1.Source(fileContent, filePath));
            }
            var foundDoc = document_finder_1.extractDocumentStringFromCodeFile(fileContent);
            if (foundDoc) {
                return graphql_1.parse(new graphql_1.Source(foundDoc, filePath));
            }
            else {
                return null;
            }
        }
        else {
            throw new errors_1.DetailedError('Failed to load a document', "\n\n      Failed to load a document.\n      Document file " + filePath + " does not exists.\n\n      ");
        }
    };
    DocumentsFromGlob.prototype.loadDocumentsSources = function (filePaths) {
        var _this = this;
        return filePaths
            .map(function (filePath) { return ({ filePath: filePath, content: _this.loadFileContent(filePath) }); })
            .filter(function (result) { return result.content; });
    };
    DocumentsFromGlob.prototype.handle = function (doc, config) {
        return __awaiter(this, void 0, void 0, function () {
            var foundDocumentsPaths;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.documentsFromGlobs(doc)];
                    case 1:
                        foundDocumentsPaths = _a.sent();
                        return [2 /*return*/, this.loadDocumentsSources(foundDocumentsPaths)];
                }
            });
        });
    };
    return DocumentsFromGlob;
}());
exports.DocumentsFromGlob = DocumentsFromGlob;
//# sourceMappingURL=documents-from-glob.js.map