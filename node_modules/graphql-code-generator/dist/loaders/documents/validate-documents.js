"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var errors_1 = require("../../errors");
var rulesToIgnore = ['KnownFragmentNames', 'NoUnusedFragments', 'NoUnusedVariables', 'KnownDirectives'];
var effectiveRules = graphql_1.specifiedRules.filter(function (f) { return !rulesToIgnore.includes(f.name); });
exports.validateGraphQlDocuments = function (schema, documentFiles) {
    return documentFiles
        .map(function (result) { return ({
        filePath: result.filePath,
        errors: graphql_1.validate(schema, result.content, effectiveRules)
    }); })
        .filter(function (r) { return r.errors.length > 0; });
};
function checkValidationErrors(loadDocumentErrors) {
    if (loadDocumentErrors.length > 0) {
        var errors = [];
        var errorCount = 0;
        for (var _i = 0, loadDocumentErrors_1 = loadDocumentErrors; _i < loadDocumentErrors_1.length; _i++) {
            var loadDocumentError = loadDocumentErrors_1[_i];
            for (var _a = 0, _b = loadDocumentError.errors; _a < _b.length; _a++) {
                var graphQLError = _b[_a];
                errors.push("\n          " + loadDocumentError.filePath + ": \n            " + graphQLError.message + "\n        ");
                errorCount++;
            }
        }
        throw new errors_1.DetailedError("Found " + errorCount + " errors in your documents", "\n      Found " + errorCount + " errors.\n      GraphQL Code Generator validated your GraphQL documents against the schema.\n      Please fix following errors and run codegen again:\n      " + errors.join('') + "\n\n    ");
    }
}
exports.checkValidationErrors = checkValidationErrors;
//# sourceMappingURL=validate-documents.js.map