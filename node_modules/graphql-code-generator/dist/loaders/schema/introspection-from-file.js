"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var fs_1 = require("fs");
var isValidPath = require("is-valid-path");
var path_1 = require("path");
var IntrospectionFromFileLoader = /** @class */ (function () {
    function IntrospectionFromFileLoader() {
    }
    IntrospectionFromFileLoader.prototype.stripBOM = function (content) {
        content = content.toString();
        // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
        // because the buffer-to-string conversion in `fs.readFileSync()`
        // translates it to FEFF, the UTF-16 BOM.
        if (content.charCodeAt(0) === 0xfeff) {
            content = content.slice(1);
        }
        return content;
    };
    IntrospectionFromFileLoader.prototype.parseBOM = function (content) {
        return JSON.parse(this.stripBOM(content));
    };
    IntrospectionFromFileLoader.prototype.canHandle = function (pointerToSchema) {
        return isValidPath(pointerToSchema) && fs_1.existsSync(pointerToSchema) && path_1.extname(pointerToSchema) === '.json';
    };
    IntrospectionFromFileLoader.prototype.handle = function (pointerToSchema, config, schemaOptions) {
        // spinner.info(`Loading GraphQL Introspection from file: ${pointerToSchema}...`);
        var _this = this;
        return new Promise(function (resolve, reject) {
            var fullPath = path_1.isAbsolute(pointerToSchema) ? pointerToSchema : path_1.resolve(process.cwd(), pointerToSchema);
            if (fs_1.existsSync(fullPath)) {
                try {
                    var fileContent = fs_1.readFileSync(fullPath, 'utf8');
                    if (!fileContent) {
                        reject("Unable to read local introspection file: " + fullPath);
                    }
                    var introspection = _this.parseBOM(fileContent);
                    if (introspection.data) {
                        introspection = introspection.data;
                    }
                    graphql_codegen_core_1.validateIntrospection(introspection);
                    resolve(graphql_codegen_core_1.introspectionToGraphQLSchema(introspection));
                }
                catch (e) {
                    reject(e);
                }
            }
            else {
                reject("Unable to locate local introspection file: " + fullPath);
            }
        });
    };
    return IntrospectionFromFileLoader;
}());
exports.IntrospectionFromFileLoader = IntrospectionFromFileLoader;
//# sourceMappingURL=introspection-from-file.js.map