"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var glob_1 = require("glob");
var path_1 = require("path");
var fs_1 = require("fs");
var graphql_1 = require("graphql");
var DEFAULT_SCHEMA_EXTENSIONS = ['gql', 'graphql', 'graphqls', 'ts', 'js'];
var DEFAULT_IGNORED_RESOLVERS_EXTENSIONS = ['spec', 'test', 'd'];
var DEFAULT_RESOLVERS_EXTENSIONS = ['ts', 'js'];
function scanForFiles(globStr, globOptions) {
    if (globOptions === void 0) { globOptions = {}; }
    return glob_1.sync(globStr, tslib_1.__assign({ absolute: true }, globOptions));
}
function buildGlob(basePath, extensions, ignoredExtensions) {
    if (ignoredExtensions === void 0) { ignoredExtensions = []; }
    return basePath + "/**/" + (ignoredExtensions.length > 0 ? "!(" + ignoredExtensions.map(function (e) { return '*.' + e; }).join('|') + ")" : '*') + "+(" + extensions.map(function (e) { return '*.' + e; }).join('|') + ")";
}
function extractExports(fileExport) {
    if (!fileExport) {
        return null;
    }
    if (fileExport.default) {
        if (fileExport.default.resolver || fileExport.default.resolvers || fileExport.default.schema) {
            return fileExport.default.resolver || fileExport.default.resolvers || fileExport.default.schema;
        }
        return fileExport.default;
    }
    if (fileExport.resolver) {
        return fileExport.resolver;
    }
    if (fileExport.resolvers) {
        return fileExport.resolvers;
    }
    if (fileExport.schema) {
        return fileExport.schema;
    }
    return fileExport;
}
var LoadSchemaFilesDefaultOptions = {
    extensions: DEFAULT_SCHEMA_EXTENSIONS,
    useRequire: false,
    requireMethod: null,
    globOptions: {},
};
function loadSchemaFiles(basePath, options) {
    if (options === void 0) { options = LoadSchemaFilesDefaultOptions; }
    var execOptions = tslib_1.__assign({}, LoadSchemaFilesDefaultOptions, options);
    var relevantPaths = scanForFiles(buildGlob(basePath, execOptions.extensions, []), options.globOptions);
    return relevantPaths.map(function (path) {
        var extension = path_1.extname(path);
        if (extension === '.js' || extension === '.ts' || execOptions.useRequire) {
            var fileExports = (execOptions.requireMethod ? execOptions.requireMethod : require)(path);
            var extractedExport = extractExports(fileExports);
            if (extractedExport && extractedExport.kind === 'Document') {
                return graphql_1.print(extractedExport);
            }
            return extractedExport;
        }
        else {
            return fs_1.readFileSync(path, { encoding: 'utf-8' });
        }
    });
}
exports.loadSchemaFiles = loadSchemaFiles;
var LoadResolversFilesDefaultOptions = {
    ignoredExtensions: DEFAULT_IGNORED_RESOLVERS_EXTENSIONS,
    extensions: DEFAULT_RESOLVERS_EXTENSIONS,
    requireMethod: null,
    globOptions: {},
};
function loadResolversFiles(basePath, options) {
    if (options === void 0) { options = LoadResolversFilesDefaultOptions; }
    var execOptions = tslib_1.__assign({}, LoadResolversFilesDefaultOptions, options);
    var relevantPaths = scanForFiles(buildGlob(basePath, execOptions.extensions, execOptions.ignoredExtensions), execOptions.globOptions);
    return relevantPaths.map(function (path) {
        try {
            var fileExports = (execOptions.requireMethod ? execOptions.requireMethod : require)(path);
            return extractExports(fileExports);
        }
        catch (e) {
            throw new Error("Unable to load resolver file: " + path + ", error: " + e);
            return null;
        }
    }).filter(function (t) { return t; });
}
exports.loadResolversFiles = loadResolversFiles;
//# sourceMappingURL=file-scanner.js.map